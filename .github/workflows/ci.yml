name: SQL CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      COMPOSE_PROJECT_NAME: sql_project   # фиксируем имя проекта

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compose up (build image with pgTAP)
        run: docker compose up -d --build

      - name: Wait for Postgres in container
        run: |
          for i in {1..40}; do
            if docker compose exec -T db pg_isready -U app -d appdb; then
              echo "Postgres is up"; exit 0
            fi
            echo "Waiting for Postgres..."; sleep 2
          done
          echo "Postgres did not become ready" && exit 1

      - name: Ensure pgTAP (idempotent)
        run: docker compose exec -T db psql -U app -d appdb -f /tests/pgtap_setup.sql

      - name: Run pgTAP tests
        run: |
          docker compose exec -T db psql -U app -d appdb -f /tests/test_basic.sql
          docker compose exec -T db psql -U app -d appdb -f /tests/test_queries.sql

      - name: Run showcase (absolute paths inside container)
        run: docker compose exec -T db bash -lc "psql -U app -d appdb -f /analytics/readme_index.sql > /analytics/run.log 2>&1"

      - name: Copy run.log out
        run: |
          CID=$(docker compose ps -q db)
          docker cp "$CID":/analytics/run.log ./analytics/run.log

      - name: Upload run.log
        uses: actions/upload-artifact@v4
        with:
          name: readme-runlog
          path: ./analytics/run.log

      - name: Compose down (cleanup)
        if: always()
        run: docker compose down -v
